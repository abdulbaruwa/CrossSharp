<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Reactive.Windows.Threading</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.Concurrency.CoreDispatcherScheduler">
            <summary>
            Represents an object that schedules units of work on a <see cref="!:Windows.UI.Core.CoreDispatcher"/>.
            </summary>
            <remarks>
            This scheduler type is typically used indirectly through the <see cref="M:System.Reactive.Linq.DispatcherObservable.ObserveOnDispatcher``1(System.IObservable{``0})"/> and <see cref="M:System.Reactive.Linq.DispatcherObservable.SubscribeOnDispatcher``1(System.IObservable{``0})"/> methods that use the current Dispatcher.
            </remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.CoreDispatcherScheduler.#ctor(Windows.UI.Core.CoreDispatcher)">
            <summary>
            Constructs a CoreDispatcherScheduler that schedules units of work on the given <see cref="!:Windows.UI.Core.CoreDispatcher"/>.
            </summary>
            <param name="dispatcher">Dispatcher to schedule work on.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.CoreDispatcherScheduler.#ctor(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.CoreDispatcherPriority)">
            <summary>
            Constructs a CoreDispatcherScheduler that schedules units of work on the given <see cref="!:Windows.UI.Core.CoreDispatcher"/> with the given priority.
            </summary>
            <param name="dispatcher">Dispatcher to schedule work on.</param>
            <param name="priority">Priority for scheduled units of work.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.CoreDispatcherScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed on the dispatcher.
            </summary>
            <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.CoreDispatcherScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime on the dispatcher, using a <see cref="!:Windows.UI.Xaml.DispatcherTimer"/> object.
            </summary>
            <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.CoreDispatcherScheduler.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>
            Schedules a periodic piece of work on the dispatcher, using a <see cref="!:Windows.UI.Xaml.DispatcherTimer"/> object.
            </summary>
            <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
            <param name="state">Initial state passed to the action upon the first iteration.</param>
            <param name="period">Period for running the work periodically.</param>
            <param name="action">Action to be executed, potentially updating the state.</param>
            <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> is negative.</exception>
        </member>
        <member name="P:System.Reactive.Concurrency.CoreDispatcherScheduler.Current">
            <summary>
            Gets the scheduler that schedules work on the <see cref="!:Windows.UI.Core.CoreDispatcher"/> associated with the current Window.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.CoreDispatcherScheduler.Dispatcher">
            <summary>
            Gets the <see cref="!:Windows.UI.Core.CoreDispatcher"/> associated with the CoreDispatcherScheduler.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.CoreDispatcherScheduler.Priority">
            <summary>
            Gets the priority at which work is scheduled.
            </summary>
        </member>
        <member name="T:System.Reactive.Linq.DispatcherObservable">
            <summary>
            Provides a set of extension methods for scheduling actions performed through observable sequences on UI dispatchers.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.ObserveOn``1(System.IObservable{``0},Windows.UI.Core.CoreDispatcher)">
            <summary>
            Asynchronously notify observers on the specified dispatcher.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="dispatcher">Dispatcher whose associated message loop is used to notify observers on.</param>
            <returns>The source sequence whose observations happen on the specified dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.ObserveOn``1(System.IObservable{``0},Windows.UI.Core.CoreDispatcher,Windows.UI.Core.CoreDispatcherPriority)">
            <summary>
            Asynchronously notify observers on the specified dispatcher.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="dispatcher">Dispatcher whose associated message loop is used to notify observers on.</param>
            <param name="priority">Priority to schedule work items at.</param>
            <returns>The source sequence whose observations happen on the specified dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.ObserveOn``1(System.IObservable{``0},Windows.UI.Xaml.DependencyObject)">
            <summary>
            Asynchronously notify observers on the dispatcher associated with the specified object.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="dependencyObject">Object to get the dispatcher from.</param>
            <returns>The source sequence whose observations happen on the specified object's dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.ObserveOn``1(System.IObservable{``0},Windows.UI.Xaml.DependencyObject,Windows.UI.Core.CoreDispatcherPriority)">
            <summary>
            Asynchronously notify observers on the dispatcher associated with the specified object.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="dependencyObject">Object to get the dispatcher from.</param>
            <param name="priority">Priority to schedule work items at.</param>
            <returns>The source sequence whose observations happen on the specified object's dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.ObserveOnDispatcher``1(System.IObservable{``0})">
            <summary>
            Asynchronously notify observers on the dispatcher associated with the current window.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <returns>The source sequence whose observations happen on the current window's dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.ObserveOnDispatcher``1(System.IObservable{``0},Windows.UI.Core.CoreDispatcherPriority)">
            <summary>
            Asynchronously notify observers using the dispatcher associated with the current window.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="priority">Priority to schedule work items at.</param>
            <returns>The source sequence whose observations happen on the current window's dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.SubscribeOn``1(System.IObservable{``0},Windows.UI.Core.CoreDispatcher)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the specified dispatcher.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="dispatcher">Dispatcher whose associated message loop is used to perform subscription and unsubscription actions on.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.SubscribeOn``1(System.IObservable{``0},Windows.UI.Core.CoreDispatcher,Windows.UI.Core.CoreDispatcherPriority)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the specified dispatcher.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="dispatcher">Dispatcher whose associated message loop is used to perform subscription and unsubscription actions on.</param>
            <param name="priority">Priority to schedule work items at.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.SubscribeOn``1(System.IObservable{``0},Windows.UI.Xaml.DependencyObject)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the dispatcher associated with the specified object.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="dependencyObject">Object to get the dispatcher from.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified object's dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.SubscribeOn``1(System.IObservable{``0},Windows.UI.Xaml.DependencyObject,Windows.UI.Core.CoreDispatcherPriority)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the dispatcher associated with the specified object.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="dependencyObject">Object to get the dispatcher from.</param>
            <param name="priority">Priority to schedule work items at.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified object's dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.SubscribeOnDispatcher``1(System.IObservable{``0})">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the dispatcher associated with the current window.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the current window's dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.SubscribeOnDispatcher``1(System.IObservable{``0},Windows.UI.Core.CoreDispatcherPriority)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the dispatcher associated with the current window.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="priority">Priority to schedule work items at.</param>
            <returns>The source sequence whose subscriptions and unsubscriptions happen on the current window's dispatcher.</returns>
        </member>
        <member name="T:System.Reactive.Strings_WindowsThreading">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Reactive.Strings_WindowsThreading.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Reactive.Strings_WindowsThreading.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Reactive.Strings_WindowsThreading.NO_DISPATCHER_CURRENT_THREAD">
            <summary>
              Looks up a localized string similar to The current thread has no Dispatcher associated with it..
            </summary>
        </member>
        <member name="P:System.Reactive.Strings_WindowsThreading.NO_WINDOW_CURRENT">
            <summary>
              Looks up a localized string similar to No current Window object found to obtain a CoreDispatcher from..
            </summary>
        </member>
    </members>
</doc>
